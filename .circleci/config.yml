version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-ecs: circleci/aws-ecs@1.3.0

jobs:
  build_and_deploy:
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      ECR_REPOSITORY_NAME: backend
      FULL_IMAGE_NAME: 549325186772.dkr.ecr.us-east-1.amazonaws.com/springbootdemo:latest
    steps:
      - checkout
      - setup_remote_docker
#       - run:
#           name: Setup common environment variables
#           command: |
#             echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
#             echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:latest"' >> $BASH_ENV


      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
            # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: circleci-demo-java-spring-{{ checksum "Backend/pom.xml" }}
      - run: cd Backend && mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
              - ~/.m2
          key: circleci-demo-java-spring-{{ checksum "Backend/pom.xml" }}

      - run: cd Backend && mvn package # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
            # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
            path: Backend/target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact
            # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
            path: Backend/target/Backend-0.0.1-SNAPSHOT.jar
        # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples

      - run:
          name: Install dependencies for AWS
          command: |
            cd Backend
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            sudo apt-get install python3-pip
            sudo pip3 install --upgrade awscli
      - run:
          name: Build image
          command: |
            cd Backend
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Push image
          command: |
            cd Backend
            export AWS_ACCESS_KEY_ID=ASIAX7ZSVE3KGB6ABZG4
            export AWS_SECRET_ACCESS_KEY=F+py2S7AFSnKf+430ONCIxVuub5xHzQShkF9is7W
            export AWS_DEFAULT_REGION=us-east-1
            export aws_session_token=FwoGZXIvYXdzEPL//////////wEaDCybuht0OPEei8roMyLMAfNyx5RmKabFCnHvCn9ve9X00l+3KBXVhav9zIN7TvWWsVVNflgbNvusC1HOkvjVgLi6rHqHyBU1aQIyb3wObPjgYiniqCxE/p77pNUHCp5H7enCynyJWjWOAbjyIYKE280w43hpLiCh6dZebgy6bodtTDhTSIUtTdaxrN08FX/ZxAyrrVU3b+7iKh72Rc+VPog7gKibAGyeT3uAtFugTZmsWDplX0S1hhhLoXliQrqZNa8FJ8vXZNJP1mdyaccjZQmPfrt1YSJAj2ke+Sjp7a/8BTIt6tNfmJXW3YOCAiWIhAUgpbHktXpECJKl6jSEBta+LV7M2LHK3adnMRU7EVd0
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 549325186772.dkr.ecr.us-east-1.amazonaws.com
            docker push $FULL_IMAGE_NAME
workflows:
  build-deploy-qa:
    jobs:
      - build_and_deploy:
          filters:
            branches:
              only: sid