version: 2.0
jobs:
  build_and_deploy:
    docker:
      - image: circleci/openjdk:8-jdk
        auth:
          username: siddharta23
          password: docker123
      - image: siddharta23:milestone-3
        auth:
          username: siddharta23
          password: docker123
    environment:
#      ECR_REPOSITORY_NAME: springbootdemo
#      FULL_IMAGE_NAME: 594973024332.dkr.ecr.us-east-1.amazonaws.com/siddharta23:milestone-3
       DOCKER_IMAGE_NAME: siddharta23:milestone-3
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
            # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: major-project-6-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
              - ~/.m2
          key: major-project-6-{{ checksum "pom.xml" }}

      - run: mvn package # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
            # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
            path: target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact
            # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
            path: target/Backend-0.0.1-SNAPSHOT.jar
        # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples

      - run:
          name: Install dependencies for AWS
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            sudo apt-get install python3-pip
            sudo pip3 install --upgrade awscli
      - run:
          name: Build image
          command: |
            docker login
            docker build -t $DOCKER_IMAGE_NAME .
      - run:
          name: Push image
          command: |
            docker push $DOCKER_IMAGE_NAME 
workflows:
  version: 2
  build-deploy-qa:
    jobs:
      - build_and_deploy:
          filters:
            branches:
              only: sid
